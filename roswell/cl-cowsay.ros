#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp
  (ql:quickload '(#:alexandria
                  #:unix-opts
                  #:cl-cowsay) :silent t))

(defpackage #:ros.script.cl-cowsay
  (:use #:cl
        #:alexandria
        #:cl-cowsay)
  (:import-from #:unix-opts))

(in-package #:ros.script.cl-cowsay)

(unix-opts:define-opts
  (:name :help
   :description "Display this help message"
   :short #\h
   :long "help")
  (:name :borg
   :description "Mode: Borg"
   :short #\b
   :long "borg")
  (:name :dead
   :description "Mode: Dead"
   :short #\d
   :long "dead")
  (:name :greedy
   :description "Mode: Greedy"
   :short #\g
   :long "greedy")
  (:name :paranoia
   :description "Mode: Paranoia"
   :short #\p
   :long "paranoia")
  (:name :stoned
   :description "Mode: Stoned"
   :short #\s
   :long "stoned")
  (:name :tired
   :description "Mode: Tired"
   :short #\t
   :long "tired")
  (:name :wired
   :description "Mode: Wired"
   :short #\w
   :long "wired")
  (:name :youthful
   :description "Mode: Youthful"
   :short #\y
   :long "youthful")
  (:name :eyes
   :description "Select the appearance of the cow's eyes."
   :short #\e
   :long "eyes"
   :arg-parser #'identity)
  (:name :tongue
   :description "The tongue is configurable similarly to the eyes through -T and tongue_string."
   :short #\T
   :long "tongue"
   :arg-parser #'identity)
  (:name :no-wrap
   :description "If it is specified, the given message will not be word-wrapped."
   :short #\n
   :long "no-wrap")
  (:name :wrap
   :description "Specifies roughly where the message should be wrapped. The default is equivalent to -W 40 i.e. wrap words at or before the 40th column."
   :arg-parser #'parse-integer
   :short #\W
   :long "wrap")
  (:name :file
   :description "Specifies a cow picture file ('cowfile') to use. It can be either a path to a cow file or the name of one of cows included in the package."
   :arg-parser #'identity
   :short #\f
   :long "file")
  (:name :random
   :description "Select a random cow"
   :short #\r
   :long "random")
  (:name :list
   :description "List all cowfiles included in this package."
   :short #\l
   :long "list"))

(defun unknown-option (condition)
  (format t "warning: ~s option is unknown!~%" (unix-opts:option condition))
  (invoke-restart 'unix-opts:skip-option))

(defun main (&rest argv)
  (setf *random-state* (make-random-state t))
  (multiple-value-bind (options free-args)
      (handler-case
          (handler-bind ((unix-opts:unknown-option #'unknown-option))
            (unix-opts:get-opts argv))
        (unix-opts:missing-arg (condition)
          (format t "fatal: option ~s needs an argument!~%" (unix-opts:option condition)))
        (unix-opts:arg-parser-failed (condition)
          (format t "fatal: cannot parse ~s as argument of ~s~%"
                  (unix-opts:raw-arg condition)
                  (unix-opts:option condition)))
        (unix-opts:missing-required-option (condition)
          (format t "fatal: ~a~%" condition)
          (unix-opts:exit 1)))
    (when (getf options :list)
      (format t "~{~A~%~}" (sort (hash-table-keys *cows*) #'string-lessp))
      (unix-opts:exit))
    (if (or (getf options :help)
            (null free-args))
        (unix-opts:describe
         :usage-of "cl-cowsay"
         :args "[FREE-ARGS]")
        (let ((wrap (getf options :wrap))
              (tongue (getf options :tongue))
              (eyes (getf options :eyes))
              (file (if (getf options :random)
                        (random-elt (hash-table-keys *cows*))
                        (getf options :file)))
              mode)
          (setf mode (get-properties options '(:borg :dead :greedy :paronoia :stoned :tired :wired :youthful)))
          (princ (apply #'cowsay `(,(format nil "~{~A~^ ~}" free-args)
                                   ,@(when file `(:file ,file))
                                   :mode ,mode :eyes ,eyes :tongue ,tongue
                                   ,@(when wrap `(:wrap ,wrap)))))))))
